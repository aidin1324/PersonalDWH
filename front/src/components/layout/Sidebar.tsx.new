import React, { useState, type JSX, useEffect } from 'react';
import { motion } from 'framer-motion';

interface NavItem {
  id: string;
  name: string;
  icon: JSX.Element;
  count?: number;
}

interface SidebarProps {
  stats?: {
    personal_unread?: number;
    group_unread?: number;
    channel_unread?: number;
    [key: string]: number | undefined;
  };
}

const Sidebar: React.FC<SidebarProps> = ({ stats = {} }) => {
  const [activeItem, setActiveItem] = useState('telegram');
  const [isMobile, setIsMobile] = useState(false);
  const [isExpanded, setIsExpanded] = useState(true);
  
  // Calculate total unread messages
  const telegramUnreadCount = 
    (stats.personal_unread || 0) + 
    (stats.group_unread || 0) + 
    (stats.channel_unread || 0);
  
  // Format badge count for display (e.g. 99+ for large numbers)
  const formatBadgeCount = (count: number): string => {
    if (count > 99) return '99+';
    return count.toString();
  };
  
  // Check for mobile viewport
  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth < 768);
      setIsExpanded(window.innerWidth >= 768);
    };
    
    // Check on initial load
    checkMobile();
    
    // Add event listener for window resize
    window.addEventListener('resize', checkMobile);
    
    // Clean up
    return () => window.removeEventListener('resize', checkMobile);
  }, []);

  // Handle sidebar toggle
  const toggleSidebar = () => {
    setIsExpanded(!isExpanded);
  };

  const navItems: NavItem[] = [
    {
      id: 'telegram',
      name: 'Telegram',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 24 24" fill="currentColor">
          <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm4.64 6.8c-.15 1.58-.8 5.42-1.13 7.19-.14.75-.42 1-.68 1.03-.58.05-1.02-.38-1.58-.75-.88-.57-1.39-.93-2.23-1.47-.99-.65-.35-1 .22-1.57.15-.15 2.63-2.42 2.68-2.63.01-.03.01-.14-.06-.2-.07-.07-.21-.04-.3-.02-.13.03-2.2 1.4-3.22 2.05-.3.2-.86.43-1.26.42-.42-.01-1.22-.24-1.82-.44-.74-.24-1.33-.36-1.28-.77.03-.22.18-.43 1.27-.95 3.56-1.62 4.73-2.13 5.27-2.19 1.8-.22 2.06.43 1.92 1.3z" />
        </svg>
      ),
      count: telegramUnreadCount
    },
    {
      id: 'news',
      name: 'News',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z" />
        </svg>
      ),
      count: 3
    },
    {
      id: 'sports',
      name: 'Sports',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
        </svg>
      ),
      count: 0
    },
    {
      id: 'settings',
      name: 'Settings',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
        </svg>
      )
    }
  ];

  return (
    <>
      {/* Mobile Toggle Button */}
      {isMobile && (
        <motion.button
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className={`fixed top-4 ${isExpanded ? 'left-64' : 'left-4'} z-50 p-2 rounded-full bg-indigo-600 text-white shadow-lg`}
          onClick={toggleSidebar}
          aria-label="Toggle sidebar"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
            {isExpanded ? (
              <path fillRule="evenodd" d="M15 10a.75.75 0 01-.75.75H7.612l2.158 1.96a.75.75 0 11-1.04 1.08l-3.5-3.25a.75.75 0 010-1.08l3.5-3.25a.75.75 0 111.04 1.08L7.612 9.25h6.638A.75.75 0 0115 10z" clipRule="evenodd" />
            ) : (
              <path fillRule="evenodd" d="M7.22 14.78a.75.75 0 001.06 0l4.25-4.25a.75.75 0 000-1.06L8.28 5.22a.75.75 0 00-1.06 1.06L10.94 10l-3.72 3.72a.75.75 0 000 1.06z" clipRule="evenodd" />
            )}
          </svg>
        </motion.button>
      )}
    
      <motion.aside 
        initial={{ x: -80, opacity: 0 }}
        animate={{ 
          x: isExpanded ? 0 : isMobile ? -280 : 0,
          width: isExpanded ? 'auto' : '0px',
          opacity: isExpanded || !isMobile ? 1 : 0.5
        }}
        transition={{ duration: 0.3, ease: "easeOut" }}
        className={`${isExpanded ? 'w-72' : isMobile ? 'w-0' : 'w-16'} 
                  fixed h-full z-40 bg-gradient-to-br from-indigo-900 to-purple-900 
                  text-white shadow-xl overflow-hidden flex flex-col`}
      >
        <div className={`p-5 ${!isExpanded && !isMobile ? 'px-3' : ''} flex flex-col h-full`}>
          <motion.div 
            initial={{ y: -20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ delay: 0.2, duration: 0.5 }}
            className="flex items-center mb-8"
          >
            <div className="h-10 w-10 rounded-xl bg-white flex items-center justify-center flex-shrink-0">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-indigo-700" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M3 3a1 1 0 011-1h12a1 1 0 011 1v14a1 1 0 01-1 1H4a1 1 0 01-1-1V3zm5 10v2h4v-2H8zm0-3v2h7V10H8zm0-3v2h7V7H8zm-3 0a1 1 0 100 2 1 1 0 000-2zm0 3a1 1 0 100 2 1 1 0 000-2zm0 3a1 1 0 100 2 1 1 0 000-2z" clipRule="evenodd" />
              </svg>
            </div>
            {(isExpanded) && (
              <h1 className="text-2xl font-bold ml-3 whitespace-nowrap overflow-hidden text-ellipsis">
                Personal DWH
              </h1>
            )}
          </motion.div>
          
          <nav className="space-y-1">
            {navItems.map((item, index) => (
              <motion.button
                key={item.id}
                initial={{ x: -20, opacity: 0 }}
                animate={{ x: 0, opacity: 1 }}
                transition={{ delay: 0.3 + index * 0.1, duration: 0.5 }}
                onClick={() => setActiveItem(item.id)}
                className={`w-full flex items-center justify-between px-4 py-3 rounded-xl transition-all duration-300 ${
                  activeItem === item.id 
                    ? 'bg-white/10 shadow-lg' 
                    : 'hover:bg-white/5'
                } ${!isExpanded && !isMobile ? 'justify-center' : ''}`}
              >
                <div className={`flex items-center ${!isExpanded && !isMobile ? 'justify-center w-full' : ''}`}>
                  <div className={`${activeItem === item.id ? 'text-purple-300' : 'text-gray-300'} flex-shrink-0`}>
                    {item.icon}
                  </div>
                  {isExpanded && (
                    <span className={`font-medium ml-3 ${activeItem === item.id ? 'text-white' : 'text-gray-300'} whitespace-nowrap`}>
                      {item.name}
                    </span>
                  )}
                </div>
                
                {isExpanded && item.count !== undefined && item.count > 0 && (
                  <motion.div 
                    initial={{ scale: 0 }}
                    animate={{ scale: 1 }}
                    transition={{ type: "spring", stiffness: 500, damping: 15 }}
                    className={`flex items-center justify-center rounded-full bg-purple-400 text-xs font-bold 
                      ${item.count > 9 ? 'min-w-[22px] px-1' : 'w-5 h-5'}`}
                  >
                    {formatBadgeCount(item.count)}
                  </motion.div>
                )}
              </motion.button>
            ))}
          </nav>

          {isExpanded && (
            <motion.div 
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.8, duration: 0.5 }}
              className="mt-auto pt-8"
            >
              <div className="bg-indigo-800/50 rounded-xl p-4 mt-8">
                <h3 className="text-sm font-medium text-purple-200 mb-2">Unread Messages</h3>
                {stats.personal_unread ? (
                  <p className="text-xs text-gray-300">{stats.personal_unread} personal chat{stats.personal_unread !== 1 ? 's' : ''}</p>
                ) : null}
                {stats.group_unread ? (
                  <p className="text-xs text-gray-300">{stats.group_unread} group message{stats.group_unread !== 1 ? 's' : ''}</p>
                ) : null}
                {stats.channel_unread ? (
                  <p className="text-xs text-gray-300">{stats.channel_unread} channel update{stats.channel_unread !== 1 ? 's' : ''}</p>
                ) : null}
                <div className="mt-3 pt-3 border-t border-indigo-700/30">
                  <button className="text-xs text-purple-300 hover:text-white transition-colors flex items-center">
                    <span>View All Messages</span>
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                    </svg>
                  </button>
                </div>
              </div>
            </motion.div>
          )}
        </div>
      </motion.aside>

      {/* Backdrop for mobile - closes sidebar when clicked */}
      {isMobile && isExpanded && (
        <div 
          className="fixed inset-0 bg-black/30 z-30"
          onClick={toggleSidebar}
        />
      )}
    </>
  );
};

export default Sidebar;
