This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.gitignore
eslint.config.js
index.html
package.json
public/vite.svg
README.md
src/App.tsx
src/components/layout/Layout.tsx
src/components/layout/Sidebar.tsx
src/components/telegram/ChatItem.tsx
src/components/telegram/ChatList.tsx
src/components/telegram/ChatView.tsx
src/components/telegram/FilterTabs.tsx
src/components/telegram/MessageItem.tsx
src/data/mockTelegramData.ts
src/index.css
src/main.tsx
src/pages/TelegramPage.tsx
src/types/telegram.ts
src/vite-env.d.ts
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)
</file>

<file path="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="package.json">
{
  "name": "front",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@tailwindcss/vite": "^4.1.5",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "tailwindcss": "^4.1.5"
  },
  "devDependencies": {
    "@eslint/js": "^9.25.0",
    "@types/react": "^19.1.2",
    "@types/react-dom": "^19.1.2",
    "@vitejs/plugin-react-swc": "^3.9.0",
    "eslint": "^9.25.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^16.0.0",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.30.1",
    "vite": "^6.3.5"
  }
}
</file>

<file path="public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="README.md">
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config({
  extends: [
    // Remove ...tseslint.configs.recommended and replace with this
    ...tseslint.configs.recommendedTypeChecked,
    // Alternatively, use this for stricter rules
    ...tseslint.configs.strictTypeChecked,
    // Optionally, add this for stylistic rules
    ...tseslint.configs.stylisticTypeChecked,
  ],
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config({
  plugins: {
    // Add the react-x and react-dom plugins
    'react-x': reactX,
    'react-dom': reactDom,
  },
  rules: {
    // other rules...
    // Enable its recommended typescript rules
    ...reactX.configs['recommended-typescript'].rules,
    ...reactDom.configs.recommended.rules,
  },
})
```
</file>

<file path="src/App.tsx">
import Layout from './components/layout/Layout';
import TelegramPage from './pages/TelegramPage';

function App() {
  return (
    <Layout>
      <TelegramPage />
    </Layout>
  );
}

export default App;
</file>

<file path="src/components/layout/Layout.tsx">
import React, { type ReactNode } from 'react';
import Sidebar from './Sidebar';

interface LayoutProps {
  children: ReactNode;
}

const Layout: React.FC<LayoutProps> = ({ children }) => {
  return (
    <div className="flex h-screen bg-gray-100">
      <Sidebar />
      <main className="flex-1 p-6 overflow-y-auto">
        {children}
      </main>
    </div>
  );
};

export default Layout;
</file>

<file path="src/components/layout/Sidebar.tsx">
import React from 'react';

const Sidebar: React.FC = () => {
  return (
    <aside className="w-64 bg-gray-800 text-white p-4 space-y-2">
      <h1 className="text-2xl font-semibold mb-4">Personal DWH</h1>
      <nav>
        <ul>
          <li>
            <a href="#" className="block py-2 px-3 bg-gray-700 rounded hover:bg-gray-600">Telegram</a>
          </li>
          <li>
            <a href="#" className="block py-2 px-3 rounded hover:bg-gray-600">News</a>
          </li>
          <li>
            <a href="#" className="block py-2 px-3 rounded hover:bg-gray-600">Sports</a>
          </li>
          <li>
            <a href="#" className="block py-2 px-3 rounded hover:bg-gray-600">Settings</a>
          </li>
        </ul>
      </nav>
    </aside>
  );
};

export default Sidebar;
</file>

<file path="src/components/telegram/ChatItem.tsx">
import React from 'react';
import type { Chat } from '../../types/telegram';

interface ChatItemProps {
  chat: Chat;
  isSelected: boolean;
  onSelectChat: (chatId: string) => void;
}

const ChatItem: React.FC<ChatItemProps> = ({ chat, isSelected, onSelectChat }) => {
  const { name, avatar, lastMessage, unreadCount } = chat;

  return (
    <div
      className={`flex items-center p-3 hover:bg-gray-200 cursor-pointer ${isSelected ? "bg-gray-200" : "bg-white"}`}
      onClick={() => onSelectChat(chat.id)}
    >
      <img src={avatar || 'https://via.placeholder.com/40'} alt={name} className="w-10 h-10 rounded-full mr-3" />
      <div className="flex-1 min-w-0">
        <div className="flex justify-between items-center">
          <p className="font-semibold text-gray-800 truncate">{name}</p>
          {lastMessage && (
            <p className="text-xs text-gray-500">
              {new Date(lastMessage.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
            </p>
          )}
        </div>
        <div className="flex justify-between items-center mt-1">
          <p className="text-sm text-gray-600 truncate">
            {lastMessage ? `${lastMessage.sender.name === "Me" ? "You: " : ""}${lastMessage.text}` : "No messages yet"}
          </p>
          {unreadCount && unreadCount > 0 && (
            <span className="bg-blue-500 text-white text-xs font-bold rounded-full px-2 py-0.5">
              {unreadCount}
            </span>
          )}
        </div>
      </div>
    </div>
  );
};

export default ChatItem;
</file>

<file path="src/components/telegram/ChatList.tsx">
import React from 'react';
import type { Chat } from '../../types/telegram';
import ChatItem from './ChatItem';

interface ChatListProps {
  chats: Chat[];
  selectedChatId: string | null;
  onSelectChat: (chatId: string) => void;
}

const ChatList: React.FC<ChatListProps> = ({ chats, selectedChatId, onSelectChat }) => {
  if (chats.length === 0) {
    return <p className="p-4 text-gray-500">No chats found for this filter.</p>;
  }
  return (
    <div className="bg-white border-r border-gray-300 overflow-y-auto h-full">
      {chats.map((chat) => (
        <ChatItem
          key={chat.id}
          chat={chat}
          isSelected={selectedChatId === chat.id}
          onSelectChat={onSelectChat}
        />
      ))}
    </div>
  );
};

export default ChatList;
</file>

<file path="src/components/telegram/ChatView.tsx">
import React, { useEffect, useRef } from 'react';
import type { Chat, User } from '../../types/telegram';
import MessageItem from './MessageItem';

interface ChatViewProps {
  chat: Chat | null;
  currentUser: User; 
}

const ChatView: React.FC<ChatViewProps> = ({ chat, currentUser }) => {
  const messagesEndRef = useRef<null | HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [chat?.messages]);

  if (!chat) {
    return (
      <div className="flex-1 flex items-center justify-center h-full bg-gray-50">
        <p className="text-gray-500 text-lg">Select a chat to start messaging</p>
      </div>
    );
  }

  return (
    <div className="flex-1 flex flex-col h-full bg-gray-50">
      <header className="bg-white p-4 border-b border-gray-300 flex items-center">
        <img src={chat.avatar || 'https://via.placeholder.com/40'} alt={chat.name} className="w-10 h-10 rounded-full mr-3" />
        <div>
          <h2 className="text-lg font-semibold text-gray-800">{chat.name}</h2>
          <p className="text-xs text-gray-500">{chat.type}</p>
        </div>
      </header>
      <div className="flex-1 p-4 overflow-y-auto space-y-4">
        {chat.messages.map((msg) => (
          <MessageItem key={msg.id} message={msg} currentUser={currentUser} />
        ))}
        <div ref={messagesEndRef} />
      </div>
      <footer className="bg-white p-4 border-t border-gray-300">
        <input 
          type="text" 
          placeholder="Type a message..." 
          className="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
      </footer>
    </div>
  );
};

export default ChatView;
</file>

<file path="src/components/telegram/FilterTabs.tsx">
import React from 'react';
import type { ChatType } from '../../types/telegram';

interface FilterTabsProps {
  activeFilter: ChatType | "all";
  onFilterChange: (filter: ChatType | "all") => void;
}

const filters: { label: string; value: ChatType | "all" }[] = [
  { label: "All", value: "all" },
  { label: "Personal", value: "personal" },
  { label: "Groups", value: "group" },
  { label: "Channels", value: "channel" },
];

const FilterTabs: React.FC<FilterTabsProps> = ({ activeFilter, onFilterChange }) => {
  return (
    <div className="mb-4 flex space-x-2 border-b border-gray-300">
      {filters.map((filter) => (
        <button
          key={filter.value}
          onClick={() => onFilterChange(filter.value)}
          className={`py-2 px-4 font-medium text-sm 
            ${activeFilter === filter.value 
              ? "border-b-2 border-blue-500 text-blue-600"
              : "text-gray-500 hover:text-gray-700"
            }
          `}
        >
          {filter.label}
        </button>
      ))}
    </div>
  );
};

export default FilterTabs;
</file>

<file path="src/components/telegram/MessageItem.tsx">
import React from 'react';
import type { Message, User } from '../../types/telegram';

interface MessageItemProps {
  message: Message;
  currentUser: User; 
}

const MessageItem: React.FC<MessageItemProps> = ({ message, currentUser }) => {
  const isMyMessage = message.sender.id === currentUser.id;

  return (
    <div className={`flex mb-3 ${isMyMessage ? 'justify-end' : 'justify-start'}`}>
      {!isMyMessage && (
        <img 
          src={message.sender.avatar || 'https://via.placeholder.com/32'} 
          alt={message.sender.name} 
          className="w-8 h-8 rounded-full mr-2 self-end"
        />
      )}
      <div 
        className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg shadow 
          ${isMyMessage 
            ? 'bg-blue-500 text-white' 
            : 'bg-gray-200 text-gray-800'
          }`}
      >
        {!isMyMessage && <p className="text-xs font-semibold mb-1">{message.sender.name}</p>}
        <p className="text-sm">{message.text}</p>
        <p className={`text-xs mt-1 ${isMyMessage ? 'text-blue-200' : 'text-gray-500'} text-right`}>
          {new Date(message.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
        </p>
      </div>
      {isMyMessage && (
         <img 
          src={currentUser.avatar || 'https://via.placeholder.com/32'} 
          alt={currentUser.name} 
          className="w-8 h-8 rounded-full ml-2 self-end"
        />
      )}
    </div>
  );
};

export default MessageItem;
</file>

<file path="src/data/mockTelegramData.ts">
import type { Chat, User, Message } from '../types/telegram';

const mockUsers: Record<string, User> = {
  u1: { id: "u1", name: "Alice", avatar: "https://i.pravatar.cc/150?u=alice" },
  u2: { id: "u2", name: "Bob", avatar: "https://i.pravatar.cc/150?u=bob" },
  u3: { id: "u3", name: "Charlie", avatar: "https://i.pravatar.cc/150?u=charlie" },
  me: { id: "me", name: "Me", avatar: "https://i.pravatar.cc/150?u=me" },
};

const mockMessages: Record<string, Message[]> = {
  chat1: [
    { id: "m1", sender: mockUsers.u1, text: "Hey, how are you?", timestamp: Date.now() - 100000, isRead: false },
    { id: "m2", sender: mockUsers.me, text: "I'm good, thanks! And you?", timestamp: Date.now() - 90000, isRead: true },
    { id: "m3", sender: mockUsers.u1, text: "Doing well! Working on the new project.", timestamp: Date.now() - 80000, isRead: false },
  ],
  chat2: [
    { id: "m4", sender: mockUsers.u2, text: "Team meeting at 3 PM.", timestamp: Date.now() - 200000, isRead: true },
    { id: "m5", sender: mockUsers.me, text: "Got it, thanks for the reminder!", timestamp: Date.now() - 190000, isRead: true },
  ],
  chat3: [
    { id: "m6", sender: mockUsers.u3, text: "Check out this cool article: [link]", timestamp: Date.now() - 300000, isRead: false },
  ],
  chat4: [
    { id: "m7", sender: mockUsers.u1, text: "Lunch today?", timestamp: Date.now() - 50000, isRead: false },
    { id: "m8", sender: mockUsers.me, text: "Sure, where to?", timestamp: Date.now() - 40000, isRead: true },
  ],
};

export const mockChats: Chat[] = [
  {
    id: "chat1",
    type: "personal",
    name: "Alice",
    avatar: mockUsers.u1.avatar,
    lastMessage: mockMessages.chat1[mockMessages.chat1.length - 1],
    unreadCount: 2,
    messages: mockMessages.chat1,
  },
  {
    id: "chat2",
    type: "group",
    name: "Project Team",
    avatar: "https://i.pravatar.cc/150?u=group1",
    lastMessage: mockMessages.chat2[mockMessages.chat2.length - 1],
    unreadCount: 0,
    messages: mockMessages.chat2,
  },
  {
    id: "chat3",
    type: "channel",
    name: "Tech News",
    avatar: "https://i.pravatar.cc/150?u=channel1",
    lastMessage: mockMessages.chat3[mockMessages.chat3.length - 1],
    unreadCount: 1,
    messages: mockMessages.chat3,
  },
  {
    id: "chat4",
    type: "personal",
    name: "Bob",
    avatar: mockUsers.u2.avatar,
    lastMessage: mockMessages.chat4[mockMessages.chat4.length - 1],
    unreadCount: 1,
    messages: mockMessages.chat4,
  },
];
</file>

<file path="src/index.css">
@import "tailwindcss";

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

/* Custom scrollbar for webkit browsers */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  background: #f1f1f1;
}

::-webkit-scrollbar-thumb {
  background: #888;
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: #555;
}
</file>

<file path="src/main.tsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
</file>

<file path="src/pages/TelegramPage.tsx">
import React, { useState, useMemo } from 'react';
import FilterTabs from '../components/telegram/FilterTabs';
import ChatList from '../components/telegram/ChatList';
import ChatView from '../components/telegram/ChatView';
import { mockChats } from '../data/mockTelegramData';
import type { ChatType, User } from '../types/telegram';

const currentUser: User = { id: "me", name: "Me", avatar: "https://i.pravatar.cc/150?u=me" };

const TelegramPage: React.FC = () => {
  const [activeFilter, setActiveFilter] = useState<ChatType | "all">("all");
  const [selectedChatId, setSelectedChatId] = useState<string | null>(null);

  const filteredChats = useMemo(() => {
    if (activeFilter === "all") {
      return mockChats;
    }
    return mockChats.filter(chat => chat.type === activeFilter);
  }, [activeFilter]);

  const selectedChat = useMemo(() => {
    return mockChats.find(chat => chat.id === selectedChatId) || null;
  }, [selectedChatId]);

  const handleSelectChat = (chatId: string) => {
    setSelectedChatId(chatId);
  };

  return (
    <div className="flex h-full shadow-lg rounded-lg overflow-hidden">
      <div className="w-1/3 min-w-[300px] max-w-[400px] flex flex-col border-r border-gray-300 bg-white">
        <div className="p-4 border-b border-gray-300">
            <input 
                type="text" 
                placeholder="Search chats..." 
                className="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-1 focus:ring-blue-500"
            />
        </div>
        <FilterTabs activeFilter={activeFilter} onFilterChange={setActiveFilter} />
        <div className="flex-1 overflow-y-auto">
            <ChatList 
                chats={filteredChats} 
                selectedChatId={selectedChatId} 
                onSelectChat={handleSelectChat} 
            />
        </div>
      </div>
      <div className="flex-1 flex flex-col">
        <ChatView chat={selectedChat} currentUser={currentUser} />
      </div>
    </div>
  );
};

export default TelegramPage;
</file>

<file path="src/types/telegram.ts">
export interface User {
  id: string;
  name: string;
  avatar?: string;
}

export interface Message {
  id: string;
  sender: User;
  text: string;
  timestamp: number;
  isRead: boolean;
}

export type ChatType = "group" | "channel" | "personal";

export interface Chat {
  id: string;
  type: ChatType;
  name: string;
  avatar?: string;
  lastMessage?: Message;
  unreadCount?: number;
  messages: Message[];
}
</file>

<file path="src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react-swc'
import tailwindcss from '@tailwindcss/vite'

// https://vite.dev/config/
export default defineConfig({
  plugins: [tailwindcss(), react()],
})
</file>

</files>
